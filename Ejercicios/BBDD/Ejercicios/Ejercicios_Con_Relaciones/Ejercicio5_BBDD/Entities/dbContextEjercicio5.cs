// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BBDD.Ejercicios.Ejercicios_Con_Relaciones.Ejercicio5_BBDD.Entities
{
    public partial class dbContextEjercicio5 : DbContext
    {
        public dbContextEjercicio5()
        {
        }

        public dbContextEjercicio5(DbContextOptions<dbContextEjercicio5> options)
            : base(options)
        {
        }

        public virtual DbSet<Alumno> Alumno { get; set; }
        public virtual DbSet<Asignatura> Asignatura { get; set; }
        public virtual DbSet<Centro> Centro { get; set; }
        public virtual DbSet<Curso> Curso { get; set; }
        public virtual DbSet<Profesor> Profesor { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost\\SQLEXPRESS;Initial Catalog=BBDDTecnara_Ej5;Integrated Security=True; Encrypt=True; TrustServerCertificate=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alumno>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Centro)
                    .WithMany(p => p.Alumno)
                    .HasForeignKey(d => d.CentroId)
                    .HasConstraintName("FK_Alumno_Alumno");
            });

            modelBuilder.Entity<Asignatura>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Curso)
                    .WithMany(p => p.Asignatura)
                    .HasForeignKey(d => d.CursoId)
                    .HasConstraintName("FK_Asignatura_Centro");

                entity.HasOne(d => d.Profesor)
                    .WithMany(p => p.Asignatura)
                    .HasForeignKey(d => d.ProfesorId)
                    .HasConstraintName("FK_Asignatura_Profesor");
            });

            modelBuilder.Entity<Centro>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Curso>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Centro)
                    .WithMany(p => p.Curso)
                    .HasForeignKey(d => d.CentroId)
                    .HasConstraintName("FK_Curso_Centro");
            });

            modelBuilder.Entity<Profesor>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Centro)
                    .WithMany(p => p.Profesor)
                    .HasForeignKey(d => d.CentroId)
                    .HasConstraintName("FK_Profesor_Centro");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}